generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  id            Int         @id @default(autoincrement())
  first_name    String?
  middle_name   String?
  last_name     String?
  email         String?     @unique
  address_id    Int?        @unique
  address       Address?    @relation(fields: [address_id], references: [id])
  phone_numbers PhoneNumber[]
  orders        Order[]
  measurements  Measurement[]
}

model Address {
  id       Int     @id @default(autoincrement())
  line1    String?
  line2    String?
  city     String?
  state    String?
  zip      String?
  country  String?
  customers Customer[]
  suppliers Supplier[]
}

model PhoneNumber {
  id          Int      @id @default(autoincrement())
  number      String   @unique
  type        PhoneType
  customer_id Int?
  supplier_id Int?
  customer    Customer? @relation(fields: [customer_id], references: [id])
  supplier    Supplier? @relation(fields: [supplier_id], references: [id])
}

enum PhoneType {
  MOBILE
  OFFICE
  RESIDENTIAL
}

model Fabric {
  id             Int             @id @default(autoincrement())
  description    String?
  available_qty  Decimal?
  fabric_code    String?         @unique
  fabric_brand   String?
  stock_location String?
  image_url      String?
  barcode        String?         @unique
  suppliers      FabricSupplier[]
  items          Item[]          
}

model FabricSupplier {
  fabric_id   Int
  supplier_id Int
  fabric      Fabric   @relation(fields: [fabric_id], references: [id])
  supplier    Supplier @relation(fields: [supplier_id], references: [id])
  meters      Decimal?
  ordered_date DateTime?

  @@id([fabric_id, supplier_id])
}

model Measurement {
  id              String       @id @default(uuid())
  customer_id     Int?
  order_id        String?
  measurement_type MeasurementType
  date            DateTime?
  values          Json
  order          Order?    @relation(fields: [order_id], references: [id])
  customer       Customer? @relation(fields: [customer_id], references: [id])
}

enum MeasurementType {
  JACKET
  PANT
  SHIRT
}

model Order {
  id         String        @id
  customer_id Int?
  date       DateTime?
  note       String?
  customer   Customer?     @relation(fields: [customer_id], references: [id])
  items      OrderItem[]
  measurements Measurement[]
  photos     OrderPhoto[]
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  order_id    String
  item_id     Int
  order       Order    @relation(fields: [order_id], references: [id])
  item        Item     @relation(fields: [item_id], references: [id])
}

model Item {
  id          Int       @id @default(autoincrement())
  name        String?
  item_type   ItemType
  fabric_id   Int?
  fabric      Fabric?   @relation(fields: [fabric_id], references: [id])

  OrderItem OrderItem[]
}

enum ItemType {
  SHIRT
  JACKET
  PANT
}

model OrderPhoto {
  id         Int      @id @default(autoincrement())
  order_id   String
  s3_key     String?
  uploaded_at DateTime @default(now())
  order      Order   @relation(fields: [order_id], references: [id])
}

model Supplier {
  id                  Int                 @id @default(autoincrement())
  name                String
  address_id          Int?                @unique
  address             Address?            @relation(fields: [address_id], references: [id])
  phone_numbers       PhoneNumber[]
  contact_person      String?
  email              String?             @unique
  fabric_supplies     FabricSupplier[]
  raw_material_orders RawMaterialsOrder[]
}

model RawMaterialsOrder {
  id                 Int       @id @default(autoincrement())
  product_name       String?
  description        String?
  raw_material_code  String?
  color             String?
  supplier_id        Int?
  quantity          Decimal?
  ordered_date      DateTime?
  supplier          Supplier? @relation(fields: [supplier_id], references: [id])
}

model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique
  password  String
  role_id   Int
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  role      Role       @relation(fields: [role_id], references: [id])
  logs      LogEntry[]
}

model Role {
  id        Int       @id @default(autoincrement())
  role_name String    @unique
  users     User[]
}

model LogEntry {
  id        Int      @id @default(autoincrement())
  user_id   Int
  action    String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [user_id], references: [id])
}
